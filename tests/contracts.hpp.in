#pragma once
#include <eosio/testing/tester.hpp>

namespace decidetesting {

    namespace testing {

        using namespace std;
        using namespace eosio::testing;

        struct contracts {

            static vector<uint8_t> decide_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/decide/decide.wasm"); }
            static vector<char> decide_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/decide/decide.abi"); }

            static vector<uint8_t> sys_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/eosio.system/eosio.system.wasm"); }
            static vector<char> sys_abi() { return read_abi("${CMAKE_BINARY_DIR}/contracts/eosio.system/eosio.system.abi"); }

            static vector<uint8_t> token_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/eosio.token/eosio.token.wasm"); }
            static vector<char> token_abi() { return read_abi("${CMAKE_BINARY_DIR}/contracts/eosio.token/eosio.token.abi"); }

        };

    }

}